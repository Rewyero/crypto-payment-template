---
description: 
globs: 
alwaysApply: true
---
# .cursorrules for CryptoStripe SaaS Project

# Project Context
project:
  name: "CryptoStripe"
  description: "A Stripe-like SaaS crypto payment system with Django, Tailwind, FontAwesome, and Coinbase Commerce API. Focus on modern, sexy UI/UX."
  tech_stack:
    - "Django"
    - "Django REST Framework"
    - "Tailwind CSS"
    - "FontAwesome"
    - "Python"
    - "Coinbase Commerce API"
    - "CoinGecko API"

# Coding Preferences
code:
  language: "Python"
  framework: "Django"
  style:
    - "Use PEP 8 conventions"
    - "Prefer concise, readable code"
    - "Favor functional views over class-based views unless explicitly requested"
  imports:
    - "Suggest common Django imports (e.g., render, redirect, models)"
    - "Include requests, decouple requests, json for API calls"
    - "Use django.contrib.auth for user management"

# UI/UX Guidelines
ui:
  framework: "Tailwind CSS"
  icon_library: "FontAwesome 6"
  design_goals:
    - "Modern, sleek, and sexy UI"
    - "Dark theme with gradient backgrounds (indigo to purple)"
    - "Glassmorphism effects (backdrop-blur, bg-opacity)"
    - "Smooth transitions and hover effects"
    - "Responsive layouts with grid and flexbox"
  suggestions:
    - "When generating HTML, always include Tailwind classes for styling"
    - "Add FontAwesome icons to buttons and headings (e.g., fa-coins, fa-tachometer-alt)"
    - "Propose vibrant gradients (e.g., from-indigo-500 to-purple-600)"
    - "Suggest animations (e.g., hover:scale-105, transition-all)"

# API Integration
api:
  primary: "Coinbase Commerce API"
  secondary: "CoinGecko API for crypto prices"
  patterns:
    - "Generate API calls with requests library"
    - "Handle JSON responses with proper error checking"
    - "Store API keys in .env using python-decouple"
  endpoints:
    - "Suggest RESTful API endpoints (e.g., /api/charges/, /webhook/)"
    - "Include authentication with TokenAuthentication for API views"

# File-Specific Rules
files:
  - path: "*.py"
    rules:
      - "Include docstrings for all functions and classes"
      - "Suggest Django-specific optimizations (e.g., Querysets, template context)"
      - "Auto-import missing modules when detected"
  - path: "*.html"
    rules:
      - "Always extend 'base.html' unless specified otherwise"
      - "Use Tailwind classes for all elements"
      - "Add FontAwesome icons where relevant (e.g., buttons, nav items)"
      - "Structure content with semantic HTML5 tags"
  - path: "views.py"
    rules:
      - "Suggest login_required decorator for user-facing views"
      - "Propose API views with DRF decorators (api_view, authentication_classes)"
      - "Include crypto price fetching logic when payments are involved"
  - path: "urls.py"
    rules:
      - "Suggest path() over re_path() for simplicity"
      - "Auto-include Django auth views (login, logout) when needed"

# AI Behavior
ai:
  autocomplete:
    - "Prioritize Django, Tailwind, and Python completions"
    - "Suggest full Tailwind class strings (e.g., 'bg-gradient-to-r from-indigo-500 to-purple-600')"
  suggestions:
    - "When UI is mentioned, propose modern design patterns (e.g., cards, modals)"
    - "Offer to refactor repetitive code into reusable components"
    - "Suggest error handling for API calls and form submissions"
  tone:
    - "Casual but professional, enthusiastic about UI/UX"
  exclusions:
    - "Avoid suggesting Bootstrap or other CSS frameworks"
    - "Do not propose class-based views unless requested"

# Project-Specific Helpers
helpers:
  - name: "generate_payment_form"
    description: "Generate a payment form with Tailwind and FontAwesome"
    template: |
      <div class="max-w-md mx-auto bg-gray-800 bg-opacity-80 p-8 rounded-xl shadow-lg backdrop-blur-md transform transition-all hover:scale-105">
          <h2 class="text-3xl font-bold mb-6 text-center bg-clip-text text-transparent bg-gradient-to-r from-indigo-400 to-purple-500">
              <i class="fas fa-coins"></i> Create Payment
          </h2>
          <form method="POST" class="space-y-6">
              {% csrf_token %}
              <div>
                  <label class="block text-sm font-medium mb-2">Amount (USD)</label>
                  <input type="number" name="amount" step="0.01" class="w-full p-3 bg-gray-700 rounded-lg focus:ring-2 focus:ring-indigo-500 outline-none transition" required>
              </div>
              <div>
                  <label class="block text-sm font-medium mb-2">Crypto Type</label>
                  <select name="crypto" class="w-full p-3 bg-gray-700 rounded-lg focus:ring-2 focus:ring-indigo-500 outline-none transition">
                      <option value="BTC">Bitcoin</option>
                      <option value="ETH">Ethereum</option>
                  </select>
              </div>
              <button type="submit" class="w-full bg-gradient-to-r from-indigo-500 to-purple-600 text-white p-3 rounded-lg hover:from-indigo-600 hover:to-purple-700 transition">
                  <i class="fas fa-paper-plane"></i> Pay Now
              </button>
          </form>
      </div>
  - name: "generate_api_view"
    description: "Generate a DRF API view for crypto payments"
    template: |
      @api_view(['POST'])
      @authentication_classes([TokenAuthentication])
      @permission_classes([IsAuthenticated])
      def api_create_charge(request):
          amount_usd = float(request.data.get('amount_usd'))
          crypto_type = request.data.get('crypto_type', 'BTC')
          crypto_price = get_crypto_price('bitcoin' if crypto_type == 'BTC' else 'ethereum')
          crypto_amount = amount_usd / crypto_price

          payment = Payment.objects.create(
              user=request.user,
              amount_usd=amount_usd,
              crypto_type=crypto_type,
              crypto_amount=crypto_amount
          )

          headers = {'Authorization': f'Bearer {COINBASE_API_KEY}', 'Content-Type': 'application/json'}
          data = {
              "name": "API Crypto Payment",
              "description": f"API Payment for {request.user.username}",
              "pricing_type": "fixed_price",
              "local_price": {"amount": str(amount_usd), "currency": "USD"},
              "metadata": {"payment_id": payment.id}
          }
          response = requests.post('https://api.commerce.coinbase.com/charges', json=data, headers=headers).json()
          payment.charge_id = response['data']['id']
          payment.save()
          return Response({'charge_url': response['data']['hosted_url'], 'payment_id': payment.id})